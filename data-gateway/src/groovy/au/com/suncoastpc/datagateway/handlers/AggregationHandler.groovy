package au.com.suncoastpc.datagateway.handlersimport org.json.simple.JSONArrayimport org.json.simple.JSONValueimport au.com.suncoastpc.datagateway.Handlerimport au.com.suncoastpc.datagateway.HandlerRegistry

class AggregationHandler implements Handler {
	static final def theInstance = new AggregationHandler()		static final def resultsCache = [:]	static final def resultsDays = [:]		static {		//register for all the context-paths that we support here		HandlerRegistry.registerHandler("Aggregator", theInstance)	}		public JSONArray handleRequest(String context, String params) {		def result = new JSONArray()				Calendar cal = Calendar.getInstance()		def currentDay = cal.get(Calendar.DAY_OF_YEAR)				def paramsJson = JSONValue.parse(params)		if (! paramsJson || ! paramsJson.datasets /*|| ! paramsJson.args*/) {			//invalid request			return result		}				def cacheKey = paramsJson.datasets.toString() + "_" + paramsJson.args				synchronized(theInstance) {			if (resultsCache.get(cacheKey) && resultsDays.get(cacheKey) == currentDay) {				return resultsCache.get(cacheKey)			}						paramsJson.datasets.each { ctx ->				def contextHandlers = HandlerRegistry.handlersForContext(ctx)				contextHandlers.each { handler ->					result.addAll(handler.handleRequest(ctx, paramsJson.args))				}			}						resultsCache.put(cacheKey, result)			resultsDays.put(cacheKey, currentDay)		}				return result	}
}